apiVersion: v1
kind: ReplicationController
metadata:
  name: {{ .Release.Name }}-rc
  labels:
    name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    name: {{ .Release.Name }}
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Values.container.image }}
        image: {{ .Values.container.registry }}/{{ .Values.container.repository }}/{{ .Values.container.image }}:{{ .Values.container.branch }}
        imagePullPolicy: {{ .Values.container.pullPolicy }}
        ports:
        - containerPort: 8080
        env:
        - name: REGISTRATION_KEY
          value: {{ required "Black Duck regKey must be provided in the values file." .Values.bdConfig.regKey }}
        volumeMounts:
        - mountPath: /etc/{{ .Release.Name }}
          name: operator-volume
        args:
        - /etc/{{ .Release.Name }}/config.json
        command:
        - ./operator
      - name: {{ .Release.Name }}-ui
        image: {{ .Values.container.registry }}/{{ .Values.container.repository }}/{{ .Values.container.image }}:{{ .Values.container.branch }}
        imagePullPolicy: {{ .Values.container.pullPolicy }}
        ports:
        - containerPort: 3000
        env:
        - name: "ADDR"
          value: "0.0.0.0"
        - name: "PORT"
          value: "3000"
        - name: "GO_ENV"
          value: "development"
        command:
        - ./app
      volumes:
      - configMap:
          defaultMode: 420
          name: {{ .Release.Name }}-config
        name: operator-volume
      serviceAccount: {{ template "synopsys-operator.serviceAccountName" . }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-service
spec:
  selector:
    name: {{ .Release.Name }}
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
    name: {{ .Release.Name }}-ui
  - protocol: TCP
    port: 80
    targetPort: 3000
    name: {{ .Release.Name }}-ui-standard-port
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
data:
  config.json: '{"OperatorTimeBombInSeconds":"315576000", "DryRun": false, "LogLevel": "debug", "Namespace": {{ quote .Release.Namespace }}, "Threadiness": 5, "PostgresRestartInMins": 10, "NFSPath" : "/kubenfs", "HubFederatorConfig": {"HubConfig": {"User": {{ quote .Values.bdConfig.adminUsername }}, "PasswordEnvVar": "HUB_PASSWORD", "ClientTimeoutMilliseconds": 5000, "Port": 443, "FetchAllProjectsPauseSeconds": 60}, "UseMockMode": false, "Port": 3016, "Registry": "gcr.io", "ImagePath": "saas-hub-stg/blackducksoftware", "ImageName": "federator", "ImageVersion": "master"}}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "synopsys-operator.serviceAccountName" . }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-admin
subjects:
- kind: ServiceAccount
  name: {{ template "synopsys-operator.serviceAccountName" . }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: ""
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    name: prometheus
  name: prometheus
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
  - name: prometheus
    protocol: TCP
    port: 9090
    targetPort: 9090
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      name: prometheus
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.1.0
        args:
        - '--log.level=debug'
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/tmp/data/'
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config-volume
          mountPath: /etc/prometheus
      volumes:
      - name: data
        emptyDir: {}
      - name: config-volume
        configMap:
          name: prometheus-cm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-cm
data:
  prometheus.yml: '{"global":{"scrape_interval":"5s"},"scrape_configs":[{"job_name":"synopsys-operator-scrape","scrape_interval":"5s","static_configs":[{"targets":["{{ .Release.Name }}:8080", "{{ .Release.Name }}-ui:3000"]}]}]}'
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ .Release.Name }}-secret
data:
  ADMIN_PASSWORD: {{ quote .Values.bdConfig.adminPassword }}
  POSTGRES_PASSWORD: {{ quote .Values.bdConfig.adminPassword }}
  USER_PASSWORD: {{ quote .Values.bdConfig.adminPassword }}
  HUB_PASSWORD: {{ quote .Values.bdConfig.adminPassword }}
