apiVersion: v1
kind: List
metadata:
  name: synopsys-operator
items:
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: synopsys-operator
    labels:
      name: synopsys-operator
  spec:
    replicas: 1
    selector:
      name: synopsys-operator
    template:
      metadata:
        labels:
          name: synopsys-operator
      spec:
        containers:
        - name: synopsys-operator
          image: ${IMAGE}
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
          volumeMounts:
          - mountPath: /etc/synopsys-operator
            name: synopsys-operator
          args:
          - /etc/synopsys-operator/config.json
          command:
          - ./operator
        - name: synopsys-operator-ui
          image: ${IMAGE}
          imagePullPolicy: Always
          ports:
          - containerPort: 3000
          env:
          - name: "ADDR"
            value: "0.0.0.0"
          - name: "PORT"
            value: "3000"
          - name: "GO_ENV"
            value: "development"
          command:
          - ./app
        volumes:
        - configMap:
            defaultMode: 420
            name: synopsys-operator
          name: synopsys-operator
        serviceAccount: synopsys-operator
- apiVersion: v1
  kind: Service
  metadata:
    name: synopsys-operator
  spec:
    selector:
      name: synopsys-operator
    ports:
      - protocol: TCP
        port: 3000
        targetPort: 3000
        name: synopsys-operator-ui
      - protocol: TCP
        port: 80
        targetPort: 3000
        name: synopsys-operator-ui-standard-port
      - protocol: TCP
        port: 8080
        targetPort: 8080
        name: synopsys-operator
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: synopsys-operator
  data:
    config.json: '{"OperatorTimeBombInSeconds":"315576000", "DryRun": false, "LogLevel": "debug", "Namespace": "${NAMESPACE}", "Threadiness": 5, "PostgresRestartInMins": 10, "PodWaitTimeoutSeconds": "600", "ResyncIntervalInSeconds": 30}'
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: synopsys-operator
    namespace: ${NAMESPACE}
- kind: ClusterRole
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: synopsys-operator-admin
  rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources:
    - customresourcedefinitions
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
  - apiGroups: ["security.openshift.io"]
    resources:
    - securitycontextconstraints
    verbs: ["get", "update", "patch"]
  - apiGroups: ["route.openshift.io"]
    resources:
    - routes
    verbs: ["get", "create"]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources:
    - clusterrolebindings
    - clusterroles
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
  - apiGroups: ["batch", "extensions"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
  - apiGroups: ["extensions", "apps"]
    resources: 
    - deployments
    - deployments/scale
    - deployments/rollback
    - statefulsets
    - statefulsets/scale
    - replicasets
    - replicasets/scale
    - daemonsets
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
  - apiGroups: [""]
    resources:
    - namespaces
    - configmaps
    - persistentvolumeclaims
    - services
    - secrets
    - replicationcontrollers
    - replicationcontrollers/scale
    - serviceaccounts
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
  - apiGroups: [""]
    resources:
    - pods
    - pods/log
    - endpoints
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources:
    - pods/exec
    verbs: ["create"]
  - apiGroups: ["synopsys.com"]
    resources: ["*"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
  - apiGroups: ["storage.k8s.io"]
    resources:
    - storageclasses
    - volumeattachments
    verbs: ["get", "list", "watch"]
  - apiGroups: ["image.openshift.io"]
    resources:
    - images
    verbs: ["get", "list", "watch"]
- kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1beta1
  metadata:
    name: synopsys-operator-admin
  subjects:
  - kind: ServiceAccount
    name: synopsys-operator
    namespace: ${NAMESPACE}
  roleRef:
    kind: ClusterRole
    name: synopsys-operator-admin
    apiGroup: ""
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: 'true'
    labels:
      name: prometheus
    name: prometheus
  spec:
    selector:
      app: prometheus
    type: NodePort
    ports:
    - name: prometheus
      protocol: TCP
      port: 9090
      targetPort: 9090
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: prometheus
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        name: prometheus
        labels:
          app: prometheus
      spec:
        containers:
        - name: prometheus
          image: ${PROMETHEUS_IMAGE}
          args:
          - '--log.level=debug'
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/tmp/data/'
          ports:
          - name: web
            containerPort: 9090
          volumeMounts:
          - name: data
            mountPath: /data
          - name: config-volume
            mountPath: /etc/prometheus
        volumes:
        - name: data
          emptyDir: {}
        - name: config-volume
          configMap:
            name: prometheus
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prometheus
  data:
    prometheus.yml: '{"global":{"scrape_interval":"5s"},"scrape_configs":[{"job_name":"synopsys-operator-scrape","scrape_interval":"5s","static_configs":[{"targets":["synopsys-operator:8080", "synopsys-operator-ui:3000"]}]}]}'