/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/blackducksoftware/synopsys-operator/pkg/api/size/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SizeLister helps list Sizes.
type SizeLister interface {
	// List lists all Sizes in the indexer.
	List(selector labels.Selector) (ret []*v1.Size, err error)
	// Sizes returns an object that can list and get Sizes.
	Sizes(namespace string) SizeNamespaceLister
	SizeListerExpansion
}

// sizeLister implements the SizeLister interface.
type sizeLister struct {
	indexer cache.Indexer
}

// NewSizeLister returns a new SizeLister.
func NewSizeLister(indexer cache.Indexer) SizeLister {
	return &sizeLister{indexer: indexer}
}

// List lists all Sizes in the indexer.
func (s *sizeLister) List(selector labels.Selector) (ret []*v1.Size, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Size))
	})
	return ret, err
}

// Sizes returns an object that can list and get Sizes.
func (s *sizeLister) Sizes(namespace string) SizeNamespaceLister {
	return sizeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SizeNamespaceLister helps list and get Sizes.
type SizeNamespaceLister interface {
	// List lists all Sizes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Size, err error)
	// Get retrieves the Size from the indexer for a given namespace and name.
	Get(name string) (*v1.Size, error)
	SizeNamespaceListerExpansion
}

// sizeNamespaceLister implements the SizeNamespaceLister
// interface.
type sizeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sizes in the indexer for a given namespace.
func (s sizeNamespaceLister) List(selector labels.Selector) (ret []*v1.Size, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Size))
	})
	return ret, err
}

// Get retrieves the Size from the indexer for a given namespace and name.
func (s sizeNamespaceLister) Get(name string) (*v1.Size, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("size"), name)
	}
	return obj.(*v1.Size), nil
}
