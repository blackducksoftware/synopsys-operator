# use the latest ubuntu environment (18.04) available on travis
dist: xenial

language: go

# Only the last two Go releases are supported by the Go team with security
# updates. Any versions older than that should be considered deprecated.
# Don't bother testing with them. tip builds your code with the latest
# development version of Go. This can warn you that your code will break
# in the next version of Go. Don't worry! Later we declare that test runs
# are allowed to fail on Go tip.
go:
  - 1.13

services:
  - docker

cache:
  directories:
    - $GOPATH/pkg/mod

# Skip the install step. Don't `go get` dependencies. Only build with the
# code in vendor/
install: true

# Only clone the most recent commit.
git:
  depth: 1

before_install:
  - export GOPROXY=https://proxy.golang.org

before_script:
  - hack/verify-gofmt.sh
  - hack/verify-golint.sh
  - hack/verify-govet.sh
  # [TODO (ybhutwala): replace scripts with either golangci-lint or use go fmt and go vet]
  # - go install github.com/golangci/golangci-lint/cmd/golangci-lint

  # Download and install KinD
  # - go get sigs.k8s.io/kind@v0.5.1
  # It's possible to download and install KinD using curl, similar as for kubectl
  # This is useful in cases when Go toolchain isn't available or you prefer running stable version
  # Binaries for KinD are available on GitHub Releases: https://github.com/kubernetes-sigs/kind/releases
  - curl -Lo kind "https://github.com/kubernetes-sigs/kind/releases/download/v0.5.1/kind-$(uname)-amd64" && chmod +x kind && sudo mv kind /usr/local/bin/

  # Download and install kubectl
  - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/

  # Create a new Kubernetes cluster using KinD
  # TODO: [ybhutwala] create clusters going back to Kubernetes 1.11
  - kind create cluster --image=kindest/node:v1.15.3

  # Set KUBECONFIG environment variable
  - cp "$(kind get kubeconfig-path)" /home/travis/.kube/config
  # - export KUBECONFIG="$(kind get kubeconfig-path)"

  # set up env variables for polaris
  - pwd
  - touch gcp_service_acount_path_file.json
  - touch covery_license_path_file.xml
  - export NAMESPACE="onprem" && export POLARIS_VERSION="0.0.373" && export GCP_SERVICE_ACCOUNT_PATH="/home/travis/gopath/src/github.com/blackducksoftware/synopsys-operator/gcp_service_acount_path_file.json" && export COVERITY_LICENSE_PATH="/home/travis/gopath/src/github.com/blackducksoftware/synopsys-operator/covery_license_path_file.xml" && export ADMIN_EMAIL="bhutwala@synopsys.com"

script:
  # [TODO: (ybhutwala)]
  # - golangci-lint run
  # - go build -v ./cmd/... ./pkg/... && go test -v -race ./cmd/... ./pkg/...
  - pwd
  - cd cmd/synopsysctl && go build -v .
  - echo "Going to try and create polaris"
  - kubectl version
  - kubectl create ns $NAMESPACE
  - pwd
  - sleep 5
  - /home/travis/gopath/src/github.com/blackducksoftware/synopsys-operator/cmd/synopsysctl/synopsysctl create polaris --namespace $NAMESPACE --version $POLARIS_VERSION --environment-dns "travis-onprem-polaris.com" --smtp-host "smtp.sendgrid.net" --smtp-port "3000" --smtp-username "example-username" --smtp-password "example-password" --smtp-sender-email "noreply@synopsys.com" --postgres-username "polaris" --postgres-password "polaris" --organization-admin-email $ADMIN_EMAIL --organization-admin-name "Polaris Test" --organization-admin-username "test123" --organization-description "Cloud Native Eng" --organization-name "Polaris" --gcp-service-account-path $GCP_SERVICE_ACCOUNT_PATH --coverity-license-path $COVERITY_LICENSE_PATH --yaml-url "https://raw.githubusercontent.com/blackducksoftware/releases/Development"
  - sleep 5
  - kind delete cluster

# [TODO (ybhutwala)]: integrate kubeval (also conftest)

