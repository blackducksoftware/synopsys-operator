apiVersion: v1
kind: List
metadata:
  name: "perceptor components"
  resourceVersion: "0.0.1"
items:
- apiVersion: v1
  kind: ReplicationController
  metadata:
    labels:
      name: perceptor
    name: perceptor
  spec:
    replicas: 1
    selector:
      name: perceptor
    template:
      metadata:
        labels:
          name: perceptor
        name: perceptor
      spec:
        containers:
        - args:
          - /etc/perceptor/perceptor.yaml
          command:
          - ./perceptor
          env:
          - name: "{{ .Values.hub.PasswordEnvVar }}"
            valueFrom:
              secretKeyRef:
                key: "{{ .Values.hub.PasswordSecretKey }}"
                name: "{{ .Values.hub.PasswordSecretName }}"
                optional: false
          image: "{{ .Values.perceptor.image }}"
          imagePullPolicy: Always
          name: perceptor
          ports:
          - containerPort: {{ .Values.perceptor.port }}
            protocol: TCP
          resources:
            requests:
              cpu: 300m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/perceptor
            name: perceptor
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: perceptor-config
          name: perceptor
- apiVersion: v1
  data:
    perceptor.yaml: '
    {
      "Hub": {
        "Hosts": [],
        "User": "sysadmin",
        "PasswordEnvVar": "{{ .Values.HubPasswordEnvVar }}",
        "ClientTimeoutMilliseconds": 100000,
        "Port": 443,
        "ConcurrentScanLimit": 2,
        "TotalScanLimit": 1000
      },
      "Timings":{
        "CheckForStalledScansPauseHours": 999999,
        "StalledScanClientTimeoutHours": 999999,
        "ModelMetricsPauseSeconds": 15,
        "UnknownImagePauseMilliseconds": 15000
      },
      "UseMockMode": true,
      "Port": {{ .Values.perceptor.port }},
      "LogLevel": "{{ .Values.LogLevel }}"
    }'
  kind: ConfigMap
  metadata:
    name: perceptor-config
- apiVersion: v1
  kind: Service
  metadata:
    name: perceptor
  spec:
    ports:
    - port: {{ .Values.perceptor.port }}
      protocol: TCP
      targetPort: {{ .Values.perceptor.port }}
    selector:
      name: perceptor
