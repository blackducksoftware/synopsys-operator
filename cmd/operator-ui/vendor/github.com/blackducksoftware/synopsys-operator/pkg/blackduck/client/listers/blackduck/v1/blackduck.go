/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/blackducksoftware/synopsys-operator/pkg/api/blackduck/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BlackduckLister helps list Blackducks.
type BlackduckLister interface {
	// List lists all Blackducks in the indexer.
	List(selector labels.Selector) (ret []*v1.Blackduck, err error)
	// Blackducks returns an object that can list and get Blackducks.
	Blackducks(namespace string) BlackduckNamespaceLister
	BlackduckListerExpansion
}

// blackduckLister implements the BlackduckLister interface.
type blackduckLister struct {
	indexer cache.Indexer
}

// NewBlackduckLister returns a new BlackduckLister.
func NewBlackduckLister(indexer cache.Indexer) BlackduckLister {
	return &blackduckLister{indexer: indexer}
}

// List lists all Blackducks in the indexer.
func (s *blackduckLister) List(selector labels.Selector) (ret []*v1.Blackduck, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Blackduck))
	})
	return ret, err
}

// Blackducks returns an object that can list and get Blackducks.
func (s *blackduckLister) Blackducks(namespace string) BlackduckNamespaceLister {
	return blackduckNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlackduckNamespaceLister helps list and get Blackducks.
type BlackduckNamespaceLister interface {
	// List lists all Blackducks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Blackduck, err error)
	// Get retrieves the Blackduck from the indexer for a given namespace and name.
	Get(name string) (*v1.Blackduck, error)
	BlackduckNamespaceListerExpansion
}

// blackduckNamespaceLister implements the BlackduckNamespaceLister
// interface.
type blackduckNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Blackducks in the indexer for a given namespace.
func (s blackduckNamespaceLister) List(selector labels.Selector) (ret []*v1.Blackduck, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Blackduck))
	})
	return ret, err
}

// Get retrieves the Blackduck from the indexer for a given namespace and name.
func (s blackduckNamespaceLister) Get(name string) (*v1.Blackduck, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("blackduck"), name)
	}
	return obj.(*v1.Blackduck), nil
}
